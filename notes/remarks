一，初始的Django项目结构
"外层" 的pyShop/目录与Django无关，只是你项目的容器，可以任意重命名。
manage.py：一个命令行工具，用于与Django进行不同方式的交互脚本，非常重要！
         （启动命令：python manage.py runserver，命令中的python指的是虚拟环境中的python）
"内层" 的pyShop/目录是真正的项目文件包裹目录，它的名字是你引用内部文件的包名，例如：pyShop.urls。
pyShop/__init__.py:一个定义包的空文件。
pyShop/settings.py:项目的主配置文件，非常重要！
pyShop/urls.py:路由文件，所有的任务都是从这里开始分配，相当于Django驱动站点的内容表格，非常重要！
pyShop/wsgi.py:一个基于WSGI的web服务器进入点，提供底层的网络通信功能，通常不用关心。

二，子应用（book,person等等）
1，创建子应用
命令行运行 python manage.py startapp 子应用名称
2，子应用目录
admin.py文件跟网站的后台管理站点配置相关。
apps.py文件用于配置当前子应用的相关信息。
migrations目录用于存放数据库迁移历史文件。
models.py文件用户保存数据库模型类。
tests.py文件用于开发测试用例，编写单元测试。
views.py文件用于编写Web应用视图。
3，注册子应用
在settings.py--INSTALLED_APPS配置项中注册安装子应用

三，ORM相关
1，将模型类反向生成数据表
命令行执行 python manage.py makemigrations，作用：生成迁移文件，将“模型类”转换为表结构文件
命令行执行 python manage.py migrate，作用：执行迁移文件，执行表结构文件，数据库生成表（默认生成在Django项目自带的sqlite数据库中）